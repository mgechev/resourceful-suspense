{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ngx-templates/shared/fesm2022/ngx-templates-shared-services.mjs"],
  "sourcesContent": ["import { isPlatformBrowser } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, PLATFORM_ID, Injectable, InjectionToken } from '@angular/core';\n\n/**\n * localStorage wrapper. Browser-only.\n * Should not be used during the server-side\n * rendering phase (no use case).\n */\nclass LocalStorage {\n  constructor() {\n    this._platformId = inject(PLATFORM_ID);\n  }\n  get _isBrowser() {\n    return isPlatformBrowser(this._platformId);\n  }\n  get(key) {\n    if (!this._isBrowser) {\n      return null;\n    }\n    return localStorage.getItem(key);\n  }\n  getJSON(key) {\n    if (!this._isBrowser) {\n      return null;\n    }\n    const item = this.get(key);\n    try {\n      return JSON.parse(item || '');\n    } catch {\n      return null;\n    }\n  }\n  set(key, data) {\n    if (!this._isBrowser) {\n      return;\n    }\n    localStorage.setItem(key, data);\n  }\n  setJSON(key, data) {\n    if (!this._isBrowser) {\n      return;\n    }\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n  remove(key) {\n    if (!this._isBrowser) {\n      return;\n    }\n    localStorage.removeItem(key);\n  }\n  clear() {\n    if (!this._isBrowser) {\n      return;\n    }\n    localStorage.clear();\n  }\n  static {\n    this.ɵfac = function LocalStorage_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || LocalStorage)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: LocalStorage,\n      factory: LocalStorage.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LocalStorage, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nconst WINDOW = new InjectionToken('WINDOW');\nconst provideWindow = () => ({\n  provide: WINDOW,\n  useFactory: () => {\n    const platformId = inject(PLATFORM_ID);\n    return isPlatformBrowser(platformId) ? window : {};\n  }\n});\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LocalStorage, WINDOW, provideWindow };\n"],
  "mappings": ";;;;;;;;;;;;;AASA,IAAM,eAAN,MAAM,cAAa;AAAA,EACjB,cAAc;AACZ,SAAK,cAAc,OAAO,WAAW;AAAA,EACvC;AAAA,EACA,IAAI,aAAa;AACf,WAAO,kBAAkB,KAAK,WAAW;AAAA,EAC3C;AAAA,EACA,IAAI,KAAK;AACP,QAAI,CAAC,KAAK,YAAY;AACpB,aAAO;AAAA,IACT;AACA,WAAO,aAAa,QAAQ,GAAG;AAAA,EACjC;AAAA,EACA,QAAQ,KAAK;AACX,QAAI,CAAC,KAAK,YAAY;AACpB,aAAO;AAAA,IACT;AACA,UAAM,OAAO,KAAK,IAAI,GAAG;AACzB,QAAI;AACF,aAAO,KAAK,MAAM,QAAQ,EAAE;AAAA,IAC9B,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,IAAI,KAAK,MAAM;AACb,QAAI,CAAC,KAAK,YAAY;AACpB;AAAA,IACF;AACA,iBAAa,QAAQ,KAAK,IAAI;AAAA,EAChC;AAAA,EACA,QAAQ,KAAK,MAAM;AACjB,QAAI,CAAC,KAAK,YAAY;AACpB;AAAA,IACF;AACA,iBAAa,QAAQ,KAAK,KAAK,UAAU,IAAI,CAAC;AAAA,EAChD;AAAA,EACA,OAAO,KAAK;AACV,QAAI,CAAC,KAAK,YAAY;AACpB;AAAA,IACF;AACA,iBAAa,WAAW,GAAG;AAAA,EAC7B;AAAA,EACA,QAAQ;AACN,QAAI,CAAC,KAAK,YAAY;AACpB;AAAA,IACF;AACA,iBAAa,MAAM;AAAA,EACrB;AAAA,EACA,OAAO;AACL,SAAK,OAAO,SAAS,qBAAqB,mBAAmB;AAC3D,aAAO,KAAK,qBAAqB,eAAc;AAAA,IACjD;AAAA,EACF;AAAA,EACA,OAAO;AACL,SAAK,QAA0B,mBAAmB;AAAA,MAChD,OAAO;AAAA,MACP,SAAS,cAAa;AAAA,MACtB,YAAY;AAAA,IACd,CAAC;AAAA,EACH;AACF;AAAA,CACC,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,cAAc,CAAC;AAAA,IACrF,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,YAAY;AAAA,IACd,CAAC;AAAA,EACH,CAAC,GAAG,MAAM,IAAI;AAChB,GAAG;AACH,IAAM,SAAS,IAAI,eAAe,QAAQ;AAC1C,IAAM,gBAAgB,OAAO;AAAA,EAC3B,SAAS;AAAA,EACT,YAAY,MAAM;AAChB,UAAM,aAAa,OAAO,WAAW;AACrC,WAAO,kBAAkB,UAAU,IAAI,SAAS,CAAC;AAAA,EACnD;AACF;",
  "names": []
}
